{"backend_state":"running","kernel":"anaconda2019","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":160305152},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1588781436197,"exec_count":1,"id":"f1b263","input":"from sklearn.datasets import load_iris\nfrom sklearn.tree import DecisionTreeClassifier\n\niris = load_iris()\nX = iris.data[:, 2:] # petal length and width\ny = iris.target\n\ntree_clf = DecisionTreeClassifier(max_depth=2, random_state=42)\ntree_clf.fit(X, y)","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"text/plain":"DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=2, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=42, splitter='best')"},"exec_count":1}},"pos":1,"start":1588781435120,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781436213,"exec_count":2,"id":"8d8fa6","input":"from sklearn.tree import export_graphviz\n\nexport_graphviz(\n        tree_clf,\n        out_file=\"iris_tree.dot\",\n        feature_names=iris.feature_names[2:],\n        class_names=iris.target_names,\n        rounded=True,\n        filled=True\n    )","kernel":"anaconda2019","no_halt":true,"pos":2,"start":1588781436204,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781436785,"exec_count":3,"id":"a1f496","input":"!dot -Tpng iris_tree.dot -o iris_tree.png","kernel":"anaconda2019","no_halt":true,"pos":3,"start":1588781436219,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781437235,"exec_count":4,"id":"68916d","input":"from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef plot_decision_boundary(clf, X, y, axes=[0, 7.5, 0, 3], iris=True, legend=False, plot_training=True):\n    x1s = np.linspace(axes[0], axes[1], 100)\n    x2s = np.linspace(axes[2], axes[3], 100)\n    x1, x2 = np.meshgrid(x1s, x2s)\n    X_new = np.c_[x1.ravel(), x2.ravel()]\n    y_pred = clf.predict(X_new).reshape(x1.shape)\n    custom_cmap = ListedColormap(['#fafab0','#9898ff','#a0faa0'])\n    plt.contourf(x1, x2, y_pred, alpha=0.3, cmap=custom_cmap)\n    if not iris:\n        custom_cmap2 = ListedColormap(['#7d7d58','#4c4c7f','#507d50'])\n        plt.contour(x1, x2, y_pred, cmap=custom_cmap2, alpha=0.8)\n    if plot_training:\n        plt.plot(X[:, 0][y==0], X[:, 1][y==0], \"yo\", label=\"Iris-Setosa\")\n        plt.plot(X[:, 0][y==1], X[:, 1][y==1], \"bs\", label=\"Iris-Versicolor\")\n        plt.plot(X[:, 0][y==2], X[:, 1][y==2], \"g^\", label=\"Iris-Virginica\")\n        plt.axis(axes)\n    if iris:\n        plt.xlabel(\"Petal length\", fontsize=14)\n        plt.ylabel(\"Petal width\", fontsize=14)\n    else:\n        plt.xlabel(r\"$x_1$\", fontsize=18)\n        plt.ylabel(r\"$x_2$\", fontsize=18, rotation=0)\n    if legend:\n        plt.legend(loc=\"lower right\", fontsize=14)\n\nplt.figure(figsize=(10, 6))\nplot_decision_boundary(tree_clf, X, y,legend=True)\nplt.plot([2.45, 2.45], [0, 3], \"k-\", linewidth=2)\nplt.plot([2.45, 7.5], [1.75, 1.75], \"k--\", linewidth=2)\nplt.plot([4.95, 4.95], [0, 1.75], \"k:\", linewidth=2)\nplt.plot([4.85, 4.85], [1.75, 3], \"k:\", linewidth=2)\nplt.text(1.40, 1.0, \"Depth=0\", fontsize=15)\nplt.text(3.2, 1.80, \"Depth=1\", fontsize=13)\nplt.text(4.05, 0.5, \"(Depth=2)\", fontsize=11)\n\nplt.show()","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"image/png":"2125ccef4add9958de7977640327044edeeb64a8","text/plain":"<Figure size 720x432 with 1 Axes>"},"metadata":{"image/png":{"height":378,"width":613},"needs_background":"light"}}},"pos":5,"start":1588781436800,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781437246,"exec_count":5,"id":"ff7461","input":"93/228*0.53+135/228*0.59","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"text/plain":"0.5655263157894737"},"exec_count":5}},"pos":6,"start":1588781437241,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781438080,"exec_count":6,"id":"2c7de3","input":"from sklearn.datasets import make_moons\nXm, ym = make_moons(n_samples=100, noise=0.25, random_state=53)\n\ndeep_tree_clf1 = DecisionTreeClassifier(random_state=42)\ndeep_tree_clf2 = DecisionTreeClassifier(min_samples_leaf=4, random_state=42)\ndeep_tree_clf1.fit(Xm, ym)\ndeep_tree_clf2.fit(Xm, ym)\n\nplt.figure(figsize=(11, 4))\nplt.subplot(121)\nplot_decision_boundary(deep_tree_clf1, Xm, ym, axes=[-1.5, 2.5, -1, 1.5], iris=False)\nplt.title(\"No restrictions\", fontsize=16)\nplt.subplot(122)\nplot_decision_boundary(deep_tree_clf2, Xm, ym, axes=[-1.5, 2.5, -1, 1.5], iris=False)\nplt.title(\"min_samples_leaf = {}\".format(deep_tree_clf2.min_samples_leaf), fontsize=14)\n\nplt.show()","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"image/png":"8b6f5bff822ac715fb3640ce221815e42cf6eb94","text/plain":"<Figure size 792x288 with 2 Axes>"},"metadata":{"image/png":{"height":287,"width":680},"needs_background":"light"}}},"pos":7,"start":1588781437254,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781439724,"exec_count":9,"id":"1b3dd0","input":"# Quadratic training set + noise\nnp.random.seed(42)\nm = 200\nX = np.random.rand(m, 1)\ny = 4 * (X - 0.5) ** 2\ny = y + np.random.randn(m, 1) / 10\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(max_depth=2, random_state=42)\ntree_reg.fit(X, y)\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ntree_reg1 = DecisionTreeRegressor(random_state=42, max_depth=2)\ntree_reg2 = DecisionTreeRegressor(random_state=42, max_depth=3)\ntree_reg1.fit(X, y)\ntree_reg2.fit(X, y)\n\ndef plot_regression_predictions(tree_reg, X, y, axes=[0, 1, -0.2, 1], ylabel=\"$y$\"):\n    x1 = np.linspace(axes[0], axes[1], 500).reshape(-1, 1)\n    y_pred = tree_reg.predict(x1)\n    plt.axis(axes)\n    plt.xlabel(\"$x_1$\", fontsize=18)\n    if ylabel:\n        plt.ylabel(ylabel, fontsize=18, rotation=0)\n    plt.plot(X, y, \"b.\")\n    plt.plot(x1, y_pred, \"r.-\", linewidth=2, label=r\"$\\hat{y}$\")\n\nplt.figure(figsize=(11, 4))\nplt.subplot(121)\nplot_regression_predictions(tree_reg1, X, y)\nfor split, style in ((0.1973, \"k-\"), (0.0917, \"k--\"), (0.7718, \"k--\")):\n    plt.plot([split, split], [-0.2, 1], style, linewidth=2)\nplt.text(0.21, 0.65, \"Depth=0\", fontsize=15)\nplt.text(0.01, 0.2, \"Depth=1\", fontsize=13)\nplt.text(0.65, 0.8, \"Depth=1\", fontsize=13)\nplt.legend(loc=\"upper center\", fontsize=18)\nplt.title(\"max_depth=2\", fontsize=14)\n\nplt.subplot(122)\nplot_regression_predictions(tree_reg2, X, y, ylabel=None)\nfor split, style in ((0.1973, \"k-\"), (0.0917, \"k--\"), (0.7718, \"k--\")):\n    plt.plot([split, split], [-0.2, 1], style, linewidth=2)\nfor split in (0.0458, 0.1298, 0.2873, 0.9040):\n    plt.plot([split, split], [-0.2, 1], \"k:\", linewidth=1)\nplt.text(0.3, 0.5, \"Depth=2\", fontsize=13)\nplt.title(\"max_depth=3\", fontsize=14)\n\nplt.show()","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"image/png":"a21dc82f7b9a6e134a1101d05d2975dc76474289","text/plain":"<Figure size 792x288 with 2 Axes>"},"metadata":{"image/png":{"height":286,"width":677},"needs_background":"light"}}},"pos":9,"start":1588781439013,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781439741,"exec_count":10,"id":"f4816c","input":"export_graphviz(\n        tree_reg1,\n        out_file=\"regression_tree.dot\",\n        feature_names=[\"X\"],\n        #class_names=iris.target_names,\n        rounded=True,\n        filled=True\n    )","kernel":"anaconda2019","no_halt":true,"pos":10,"start":1588781439733,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781440106,"exec_count":11,"id":"305373","input":"!dot -Tpng regression_tree.dot -o regression_tree.png","kernel":"anaconda2019","no_halt":true,"pos":11,"start":1588781439747,"state":"done","type":"cell"}
{"cell_type":"code","end":1588781440549,"exec_count":12,"id":"b7ee67","input":"tree_reg1 = DecisionTreeRegressor(random_state=42)\ntree_reg2 = DecisionTreeRegressor(random_state=42, min_samples_leaf=10)\ntree_reg1.fit(X, y)\ntree_reg2.fit(X, y)\n\nx1 = np.linspace(0, 1, 500).reshape(-1, 1)\ny_pred1 = tree_reg1.predict(x1)\ny_pred2 = tree_reg2.predict(x1)\n\nplt.figure(figsize=(11, 4))\n\nplt.subplot(121)\nplt.plot(X, y, \"b.\")\nplt.plot(x1, y_pred1, \"r.-\", linewidth=2, label=r\"$\\hat{y}$\")\nplt.axis([0, 1, -0.2, 1.1])\nplt.xlabel(\"$x_1$\", fontsize=18)\nplt.ylabel(\"$y$\", fontsize=18, rotation=0)\nplt.legend(loc=\"upper center\", fontsize=18)\nplt.title(\"No restrictions\", fontsize=14)\n\nplt.subplot(122)\nplt.plot(X, y, \"b.\")\nplt.plot(x1, y_pred2, \"r.-\", linewidth=2, label=r\"$\\hat{y}$\")\nplt.axis([0, 1, -0.2, 1.1])\nplt.xlabel(\"$x_1$\", fontsize=18)\nplt.title(\"min_samples_leaf={}\".format(tree_reg2.min_samples_leaf), fontsize=14)\n\nplt.show()","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"image/png":"85c01200b3c5bbddeb4147aa88bae7e5cc6da4f8","text/plain":"<Figure size 792x288 with 2 Axes>"},"metadata":{"image/png":{"height":286,"width":677},"needs_background":"light"}}},"pos":13,"start":1588781440117,"state":"done","type":"cell"}
{"cell_type":"code","id":"8f4bec","input":"","kernel":"anaconda2019","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"60e6e2","input":"![img](no_restrictions.png)\n![img](restrictions.png)","pos":7.875,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7b3e89","input":"![img](iris_tree.png)","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8c7849","input":"### Decision Trees\n\nAdapted/stolen/borrowed from [https://github.com/ageron/handson-ml/blob/master/06_decision_trees.ipynb](https://github.com/ageron/handson-ml/blob/master/06_decision_trees.ipynb)","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d14c42","input":"![img](regression_tree.png)","pos":12,"state":"done","type":"cell"}
{"end":1588781438100,"exec_count":7,"id":"8184b8","input":"export_graphviz(\n        deep_tree_clf1,\n        out_file=\"no_restrictions.dot\",\n        feature_names=[\"X1\",\"X2\"],\n        class_names=[\"moon1\",\"moon2\"],\n        rounded=True,\n        filled=True\n    )\n\nexport_graphviz(\n        deep_tree_clf2,\n        out_file=\"restrictions.dot\",\n        feature_names=[\"X1\",\"X2\"],\n        class_names=[\"moon1\",\"moon2\"],\n        rounded=True,\n        filled=True\n    )","kernel":"anaconda2019","no_halt":true,"pos":7.5,"start":1588781438092,"state":"done","type":"cell"}
{"end":1588781439006,"exec_count":8,"id":"92b532","input":"!dot -Tpng no_restrictions.dot -o no_restrictions.png\n!dot -Tpng restrictions.dot -o restrictions.png","kernel":"anaconda2019","no_halt":true,"pos":7.75,"start":1588781438105,"state":"done","type":"cell"}
{"end":1588781441211,"exec_count":13,"id":"b4037b","input":"np.random.seed(6)\nXs = np.random.rand(100, 2) - 0.5\nys = (Xs[:, 0] > 0).astype(np.float32) * 2\n\nangle = np.pi / 4\nrotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])\nXsr = Xs.dot(rotation_matrix)\n\ntree_clf_s = DecisionTreeClassifier(random_state=42)\ntree_clf_s.fit(Xs, ys)\ntree_clf_sr = DecisionTreeClassifier(random_state=42)\ntree_clf_sr.fit(Xsr, ys)\n\nplt.figure(figsize=(11, 4))\nplt.subplot(121)\nplot_decision_boundary(tree_clf_s, Xs, ys, axes=[-0.7, 0.7, -0.7, 0.7], iris=False)\nplt.subplot(122)\nplot_decision_boundary(tree_clf_sr, Xsr, ys, axes=[-0.7, 0.7, -0.7, 0.7], iris=False)\n\nplt.show()","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"image/png":"22d09a812b556c3aebe3491f9bc4bbea7e8d6749","text/plain":"<Figure size 792x288 with 2 Axes>"},"metadata":{"image/png":{"height":269,"width":672},"needs_background":"light"}}},"pos":14,"start":1588781440561,"state":"done","type":"cell"}
{"end":1588781441223,"exec_count":14,"id":"8d40c2","input":"def gini(ccounts):\n    dist = ccounts/np.sum(ccounts)\n    return 1-np.sum(dist**2)\n\ngini(np.array([0,49,5]))","kernel":"anaconda2019","no_halt":true,"output":{"0":{"data":{"text/plain":"0.16803840877914955"},"exec_count":14}},"pos":15,"start":1588781441218,"state":"done","type":"cell"}
{"id":"78a7b7","input":"","pos":16,"type":"cell"}
{"id":0,"time":1588775230390,"type":"user"}
{"last_load":1588775230444,"type":"file"}